<p>{{ 'Target path' | trans({}, (bundle_name | lower)) }}: {{ params['upload_path_after_document_root'] }}</p>
    <ul>
{% if params['allowed_extensions'] %}<li>{{ 'Allowed file extensions' | trans({}, (bundle_name | lower)) }}: {{ params['allowed_extensions']}}</li>{% endif %}
{% if params['size_limit'] %}<li>{{ 'Max file size' | trans({}, (bundle_name | lower)) }}: {{ params['size_limit'] }} bytes</li>{% endif %}
{% if params['max_number_of_files'] %}<li>{{ 'Max number of files' | trans({}, (bundle_name | lower)) }}: {{ params['max_number_of_files'] }}</li>{% endif %}
    </ul>
	<div id="mmf-fm-file-uploader">
		<noscript>
			<p>{{ 'Please enable JavaScript to use file uploader.' | trans({}, (bundle_name | lower)) }}</p>
		</noscript>
	</div>


<script type="text/javascript">
//<![CDATA[
$(document).ready(function(){

    $("#mmf-fm-file-uploader").plupload({
		// General settings
		runtimes : 'html5,html4',
		url : '{{ path('mmf_fm_upload') }}',
		max_file_size : '{{ params['size_limit'] }}b',
		chunk_size : '1mb',
		unique_names : false,
        multiple_queues: true,
        multipart: true,
        multipart_params: { 'url_safe_encoded_params': '{{ url_safe_encoded_params }}'},
		// Specify what files to browse for
		filters : [
			{title : "{{ 'Allowed file extensions' | trans({}, (bundle_name | lower)) }}", extensions : "{{ params['allowed_extensions'] }}"},
		],
		init: {
            UploadComplete: function(up, files) {
                mmf_fm_load('#mmf-fm-list-tab','{{ path( 'mmf_fm_list', { 'url_safe_encoded_params': url_safe_encoded_params }) }}');
            },
            Error: function(up, error) {

            },
            FileUploaded:  function(Up, File, Response) {
                var obj = eval('(' + Response['response'] + ')'); // parse JSON response
                // check for server-side error
                if ((typeof(obj.result) != 'undefined') && obj.result == 'error') {
                    Up.trigger("Error", {message : File.name + ': ' + obj.message, code : obj.code , details : obj.details, file: File});
                    // return false so pluploadQueue handlers do not receive
                    // FileUploaded but instead receive only the error
                    // we have raised - so it will flag file as failed rather
                    // than successful
                    return false; // stop propagation
               }
           }//end fileuploaded
		}//end of init
	});
//http://www.plupload.com/punbb/viewtopic.php?id=45

});//closes $(document).ready ...

//]]>
</script>

